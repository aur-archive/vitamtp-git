diff --git a/configure.ac b/configure.ac
index 01f9d61..dbc6cf0 100644
--- a/configure.ac
+++ b/configure.ac
@@ -61,6 +61,7 @@ if test x"$ac_enable_wireless" = "xyes" ; then
     DEVICE_CFLAGS="$DEVICE_CFLAGS -DPTP_IP_SUPPORT"
 fi
 AC_SUBST(DEVICE_CFLAGS)
+AC_SUBST(OSFLAGS)
 
 # Checks for XML.
 PKG_CHECK_MODULES(XML, libxml-2.0)
@@ -98,6 +99,9 @@ AC_FUNC_STAT
 AC_FUNC_REALLOC
 AC_CHECK_FUNCS([getcwd memset mkdir strchr strcspn strdup strrchr strstr strtol], [], [AC_MSG_ERROR([Cannot find required function.])])
 
+# Support for large files in 32bit systems
+AC_SYS_LARGEFILE
+
 # Output
 # Required for gphoto-ptp2
 AX_NEED_STDINT_H([src/_stdint.h])
diff --git a/libvitamtp.pc.in b/libvitamtp.pc.in
index 291e932..e7e37dc 100644
--- a/libvitamtp.pc.in
+++ b/libvitamtp.pc.in
@@ -4,10 +4,9 @@ libdir=@libdir@
 includedir=@includedir@
 
 Name: libvitamtp
-Media transfer with PlayStation Vita
+Description: Media transfer with PlayStation Vita
 Version: @VERSION@
 Libs: -L${libdir} -lvitamtp
 Libs.private: @LIBS@
 Requires.private: libusb-1.0 libxml-2.0
 Cflags: -I${includedir} @OSFLAGS@
-
diff --git a/src/database.c b/src/database.c
index 7120f36..66817e6 100644
--- a/src/database.c
+++ b/src/database.c
@@ -18,6 +18,7 @@
 //
 
 #define _GNU_SOURCE
+#include "config.h"
 #include <assert.h>
 #include <dirent.h>
 #include <limits.h>
diff --git a/src/datautils.c b/src/datautils.c
index ce4dad2..015338b 100644
--- a/src/datautils.c
+++ b/src/datautils.c
@@ -474,7 +474,10 @@ int VitaMTP_Data_Metadata_To_XML(const metadata_t *p_metadata, char **data, int
             char *aspectRatio;
             asprintf(&aspectRatio, "%.6f", current->data.thumbnail.aspectRatio);
             char *period = strchr(aspectRatio, '.');
-            *period = ','; // All this to make period a comma, maybe there is an easier way?
+            if(period)
+            {
+                *period = ','; // All this to make period a comma, maybe there is an easier way?
+            }
             xmlTextWriterWriteAttribute(writer, BAD_CAST "aspectRatio", BAD_CAST aspectRatio);
             free(aspectRatio);
             xmlTextWriterWriteFormatAttribute(writer, BAD_CAST "fromType", "%d", current->data.thumbnail.fromType);
diff --git a/src/opencma.c b/src/opencma.c
index 7c23f2f..ce2f014 100644
--- a/src/opencma.c
+++ b/src/opencma.c
@@ -18,6 +18,7 @@
 //  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 //
 
+#include "config.h"
 #include <assert.h>
 #include <fcntl.h>
 #include <limits.h>
diff --git a/src/opencma.h b/src/opencma.h
index 6f1f58d..76c4f00 100644
--- a/src/opencma.h
+++ b/src/opencma.h
@@ -118,8 +118,8 @@ int filterObjects(int ohfiParent, metadata_t **p_head);
 /* Utility functions */
 int createNewDirectory(const char *path);
 int createNewFile(const char *name);
-int readFileToBuffer(const char *name, size_t seek, unsigned char **p_data, unsigned int *p_len);
-int writeFileFromBuffer(const char *name, size_t seek, unsigned char *data, size_t len);
+int readFileToBuffer(const char *name, off_t seek, unsigned char **p_data, unsigned int *p_len);
+int writeFileFromBuffer(const char *name, off_t seek, unsigned char *data, size_t len);
 int deleteEntry(const char *fpath, const struct stat *sb, int typeflag, struct FTW *ftw);
 void deleteAll(const char *path);
 int fileExists(const char *path);
diff --git a/src/utilities.c b/src/utilities.c
index ac7bc96..d33305f 100644
--- a/src/utilities.c
+++ b/src/utilities.c
@@ -18,6 +18,7 @@
 //
 
 #define _GNU_SOURCE
+#include "config.h"
 #include <errno.h>
 #include <fcntl.h>
 #include <ftw.h>
@@ -87,7 +88,7 @@ int createNewFile(const char *name)
     return close(fd);
 }
 
-int readFileToBuffer(const char *name, size_t seek, unsigned char **p_data, unsigned int *p_len)
+int readFileToBuffer(const char *name, off_t seek, unsigned char **p_data, unsigned int *p_len)
 {
     FILE *file = fopen(name, "r");
 
@@ -102,17 +103,22 @@ int readFileToBuffer(const char *name, size_t seek, unsigned char **p_data, unsi
 
     if (buflen == 0)
     {
-        if (fseek(file, 0, SEEK_END) < 0)
+        if (fseeko(file, 0, SEEK_END) < 0)
         {
             LOG(LERROR, "Cannot seek to end of file.\n");
             fclose(file);
             return -1;
         }
 
+        /*
+         FIXME: this will produce undefined results on 32bit systems
+         if readFileToBuffer is called with p_len = 0 and the file
+         is greater than 2GiB
+        */
         buflen = (unsigned int)ftell(file);
     }
 
-    if (fseek(file, seek, SEEK_SET) < 0)
+    if (fseeko(file, seek, SEEK_SET) < 0)
     {
         LOG(LERROR, "Cannot seek to %zu.\n", seek);
         fclose(file);
@@ -142,23 +148,49 @@ int readFileToBuffer(const char *name, size_t seek, unsigned char **p_data, unsi
     return 0;
 }
 
-int writeFileFromBuffer(const char *name, size_t seek, unsigned char *data, size_t len)
+int writeFileFromBuffer(const char *name, off_t seek, unsigned char *data, size_t len)
 {
     FILE *file = fopen(name, "a+");
 
     if (file == NULL)
     {
-        LOG(LERROR, "Cannot open %s for writing.\n", name);
+        LOG(LERROR, "Cannot open %s for appending.\n", name);
         return -1;
     }
 
-    if (fseek(file, seek, SEEK_SET) < 0)
+    if (fseeko(file, 0, SEEK_END) < 0)
     {
-        LOG(LERROR, "Cannot seek to %zu.\n", seek);
+        LOG(LERROR, "Cannot seek to the end of the stream.\n");
         fclose(file);
         return -1;
     }
 
+    off_t file_size = ftello(file);
+    if (file_size < 0)
+    {
+        LOG(LERROR, "Cannot get the current position on the stream\n");
+        fclose(file);
+        return -1;
+    }
+
+    if (file_size > 0 && seek < file_size)
+    {
+        file = freopen(name, "r+", file);
+
+        if (file == NULL)
+        {
+            LOG(LERROR, "Cannot reopen %s for writing.\n", name);
+            return -1;
+        }
+
+        if (fseeko(file, seek, SEEK_SET) < 0)
+        {
+            LOG(LERROR, "Cannot seek to %zu.\n", seek);
+            fclose(file);
+            return -1;
+        }
+    }
+
     if (fwrite(data, sizeof(char), len, file) < len)
     {
         LOG(LERROR, "Write short of %zu bytes.\n", len);
diff --git a/src/vitamtp.h b/src/vitamtp.h
index 14551d2..cc14ffb 100644
--- a/src/vitamtp.h
+++ b/src/vitamtp.h
@@ -20,6 +20,10 @@
 #ifndef VitaMTP_h
 #define VitaMTP_h
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 #include <stdint.h>
 
 /**
@@ -486,9 +490,10 @@ typedef int (*register_device_callback_t)(wireless_vita_info_t *info, int *p_err
  */
 #define VITAMTP_VERSION_MAJOR 2
 #define VITAMTP_VERSION_MINOR 0
+#define VITAMTP_PROTOCOL_FW_2_60 1600010
 #define VITAMTP_PROTOCOL_FW_2_10 1500010
 #define VITAMTP_PROTOCOL_FW_2_00 1400010
-#define VITAMTP_PROTOCOL_MAX_VERSION VITAMTP_PROTOCOL_FW_2_10
+#define VITAMTP_PROTOCOL_MAX_VERSION VITAMTP_PROTOCOL_FW_2_60
 #define VITAMTP_WIRELESS_FW_2_00 1000000
 #define VITAMTP_WIRELESS_MAX_VERSION VITAMTP_WIRELESS_FW_2_00
 
@@ -779,4 +784,8 @@ int VitaMTP_Data_Capability_From_XML(capability_info_t **p_info, const char *dat
 int VitaMTP_Data_Capability_To_XML(const capability_info_t *info, char **p_data, int *p_len);
 int VitaMTP_Data_Free_Capability(capability_info_t *info);
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif
diff --git a/src/wireless.c b/src/wireless.c
index 4630801..a075605 100644
--- a/src/wireless.c
+++ b/src/wireless.c
@@ -1225,8 +1225,6 @@ static int VitaMTP_Get_Wireless_Device(wireless_host_info_t *info, vita_device_t
     fd_set fd;
     struct timeval time = {0};
     int ret;
-    int c_sock = -1;
-    char *data = NULL;
     size_t len;
     char method[20];
     int read;
@@ -1237,10 +1235,15 @@ static int VitaMTP_Get_Wireless_Device(wireless_host_info_t *info, vita_device_t
 
     while (listen)
     {
+        int c_sock;
         FD_ZERO(&fd);
         FD_SET(s_sock, &fd);
 
-        if (timeout) time.tv_sec = timeout;
+        if (timeout)
+        {
+            time.tv_sec = timeout;
+            time.tv_sec = 0;
+        }
 
         // use select for the timeout feature, ignore fd
         // s_sock+1 allows us to check fd "s_sock" but ignore the rest
@@ -1265,6 +1268,7 @@ static int VitaMTP_Get_Wireless_Device(wireless_host_info_t *info, vita_device_t
 
         VitaMTP_Log(VitaMTP_DEBUG, "Found new client.\n");
 
+        char *data = NULL;
         while (1)
         {
             char resp[RESPONSE_MAX_SIZE];
@@ -1279,7 +1283,6 @@ static int VitaMTP_Get_Wireless_Device(wireless_host_info_t *info, vita_device_t
             if (len == 0)
             {
                 pin = -1; // reset any current registration
-                close(c_sock);
                 break; // connection closed
             }
 
@@ -1395,8 +1398,7 @@ static int VitaMTP_Get_Wireless_Device(wireless_host_info_t *info, vita_device_t
         close(c_sock);
     }
 
-    free(data);
-    close(c_sock);
+    sleep(1);
     close(s_sock);
 
     if (device->network_device.addr.sin_addr.s_addr > 0)
